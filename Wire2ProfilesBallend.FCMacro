
__title__ = "Create gcode for processing sweeped wire by BallEnd"
__doc__ = ""
__url__ = "https://forum.freecad.org/viewtopic.php?t=94642"

import FreeCAD
import FreeCADGui
import Part
import Path
import PathScripts.PathUtils as PathUtils

import copy
import math


"""
1. Create Job
2. Add BallEnd tool
3. Create Profile for top contour
   Check Final Depth must be the same like Height of the top profile
   Side = Outside (for wire on outer side)
   Split wire for two parts, if you need process inner and outer side
4. Select Profile operation and edges of sweeped shape along profile
5. Execute macro
   Check Report view if needed
"""

step = 1       # Distance between points on wire


def rndVec(vector, prec=1):
    x = round(vector.x, prec)
    y = round(vector.y, prec)
    z = round(vector.z, prec)
    return FreeCAD.Vector(x, y, z)

print()
print("--- Macro to create gcode for processing sweeped wire by BallEnd ---")

sel = FreeCADGui.Selection.getSelectionEx()
if not sel:
    print("  Please select base profile in top of wire")

else:
    selProfiles = [s.Object for s in sel if "Profile" in s.Object.Name]
    if not selProfiles:
        print("  Error: Profile operation not selected")
    elif not selProfiles[0].Path.Length:
        print("  Error: Profile do not contain Path")

    shapes = [s for s in sel if "Part" in s.Object.TypeId]
    wire = None
    if shapes:
        shape = shapes[0]
        base = shape.Object
        subNames = shape.SubElementNames

        edges = [base.Shape.getElement(sub).copy() for sub in subNames if sub.startswith("Edge")]

        if edges:
            wire = Part.Wire(Part.__sortEdges__(edges))
    if not wire:
        print("  Error: Sweeped wire not selected")

    if selProfiles and wire:
        origProfile = selProfiles[0]
        wirePlane = wire.findPlane()
        wirePlaneNormal = wirePlane.normal(0, 0)
        pointTop = wire.Vertexes[0].Point
        pointBottom = wire.Vertexes[-1].Point
        if pointTop.z < pointBottom.z:
            pointTop, pointBottom = pointBottom, pointTop
            isWireReversed = True
        else:
            isWireReversed = False

        # Create copy of Profile operation
        baseProfile = FreeCAD.ActiveDocument.copyObject(origProfile)
        job = PathUtils.findParentJob(origProfile)
        job.Proxy.addOperation(baseProfile)

        baseProfile.setExpression("FinalDepth", None)
        baseProfile.setExpression("StartDepth", None)
        baseProfile.setExpression("StepDown", None)
        baseProfile.UseComp = False
        baseProfile.StartDepth = pointTop.z
        baseProfile.OffsetExtra = 0

        tool = baseProfile.ToolController.Tool
        toolDiam = tool.Diameter.Value
        toolRadius = toolDiam / 2
        baseProfile.StepDown = pointTop.z - pointBottom.z + toolDiam/2 + 0.1

        pVert = copy.copy(pointTop)
        gcode = []
        for edge in wire.Edges:
            points = edge.discretize(Distance = step)
            if isWireReversed:
                points = points[::-1]

            # https://forum.freecad.org/viewtopic.php?p=842238#p842238
            if isinstance(edge.Curve, Part.Line):
                tangent = edge.tangentAt(0)
                normals = [tangent.cross(wirePlaneNormal)] * len(points)
            else:
                normals = [edge.Curve.normal(edge.Curve.parameter(p)) for p in points]

            for i, normal in enumerate(normals):
                if normal.z < 0:
                    normal = normal.negative()

                pVert.z = points[i].z
                offsetExtra = points[i].distanceToPoint(pVert) + math.hypot(normal.x, normal.y) * toolRadius
                finalDepth = points[i].z + abs(normal.z) * toolRadius - toolRadius

                # Set currentDepth and offsetExtra to Profile
                baseProfile.FinalDepth = finalDepth
                baseProfile.OffsetExtra = offsetExtra
                baseProfile.recompute()

                gcodeCurrent = [cmd.toGCode() for cmd in baseProfile.Path.Commands]
                gcode += gcodeCurrent


        # Delete copy of Profile
        FreeCAD.ActiveDocument.removeObject(baseProfile.Name)

        res = Path.Op.Gui.Custom.Command.res
        filletGcode = Path.Op.Custom.Create("WireGcodeBallEnd")
        filletGcode.ViewObject.Proxy = Path.Op.Gui.Custom.PathOpGui.ViewProvider(filletGcode.ViewObject, res)
        filletGcode.Gcode = gcode
        filletGcode.ViewObject.Visibility = True
        filletGcode.ViewObject.Proxy.deleteOnReject = False
        filletGcode.recompute()
